const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const { createClient } = require("@supabase/supabase-js");

require("dotenv").config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const BASE_URL = "https://www.magticom.ge/ru/sakvirveli";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

if (!BOT_TOKEN) {
  console.error("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
  process.exit(1);
}

if (!supabaseUrl || !supabaseKey) {
  console.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase!");
  process.exit(1);
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

let botData = {
  subscribers: [],
  groupChats: [],
  lastCheckedNumber: 262,
  lastFoundNumber: 262,
  isMonitoring: false,
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase (–≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
async function initSupabase() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    const { data, error } = await supabase
      .from("bot_settings")
      .select("*")
      .single();

    if (error && error.code === "PGRST116") {
      // –ó–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º
      const { error: insertError } = await supabase
        .from("bot_settings")
        .insert({
          id: 1,
          subscribers: botData.subscribers,
          group_chats: botData.groupChats,
          last_checked_number: botData.lastCheckedNumber,
          last_found_number: botData.lastFoundNumber,
          is_monitoring: botData.isMonitoring,
        });

      if (insertError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:", insertError);
      } else {
        console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ Supabase");
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:", error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
async function loadData() {
  try {
    const { data, error } = await supabase
      .from("bot_settings")
      .select("*")
      .single();

    if (error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:", error);
      return;
    }

    if (data) {
      botData = {
        subscribers: data.subscribers || [],
        groupChats: data.group_chats || [],
        lastCheckedNumber: data.last_checked_number || 262,
        lastFoundNumber: data.last_found_number || 262,
        isMonitoring: data.is_monitoring || false,
      };

      console.log("üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase");
      console.log(`üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${botData.subscribers.length}`);
      console.log(`üí¨ –ì—Ä—É–ø–ø: ${botData.groupChats.length}`);
    }
  } catch (error) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase:", error.message);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
async function saveData() {
  try {
    const { error } = await supabase
      .from("bot_settings")
      .update({
        subscribers: botData.subscribers,
        group_chats: botData.groupChats,
        last_checked_number: botData.lastCheckedNumber,
        last_found_number: botData.lastFoundNumber,
        is_monitoring: botData.isMonitoring,
        updated_at: new Date().toISOString(),
      })
      .eq("id", 1);

    if (error) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:", error);
    } else {
      console.log("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase");
    }
  } catch (error) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Supabase:", error.message);
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
setInterval(() => {
  saveData();
}, 5 * 60 * 1000);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on("SIGINT", async () => {
  console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...");
  await saveData();
  process.exit(0);
});

process.on("SIGTERM", async () => {
  console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...");
  await saveData();
  process.exit(0);
});

// –ó–¥–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞...
// (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ checkPageExists, extractTitle, extractContent, etc. –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

async function checkPageExists(pageNumber) {
  try {
    const url = `${BASE_URL}${pageNumber}`;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

    const response = await axios.get(url, {
      timeout: 10000,
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
      },
    });

    const isValidPromoPage =
      response.data.includes("–ß—É–¥–æ") ||
      response.data.includes("–∞–∫—Ü–∏") ||
      response.data.includes("–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏");

    return {
      exists: response.status === 200 && isValidPromoPage,
      url: url,
      title: extractTitle(response.data),
      content: extractContent(response.data),
    };
  } catch (error) {
    console.log(`‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
    return { exists: false, url: `${BASE_URL}${pageNumber}` };
  }
}

function extractTitle(html) {
  const titleMatch = html.match(/<title>(.*?)<\/title>/i);
  if (titleMatch) {
    return titleMatch[1].trim();
  }

  const h1Match = html.match(/<h1[^>]*>(.*?)<\/h1>/i);
  if (h1Match) {
    return h1Match[1].replace(/<[^>]*>/g, "").trim();
  }

  return "–ù–æ–≤–∞—è –∞–∫—Ü–∏—è –æ—Ç Magticom";
}

function extractContent(html) {
  try {
    let extractedContent = [];

    console.log('üìÑ –ò—â–µ–º –±–ª–æ–∫ id="article" –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã...');

    const articleMatch = html.match(/<div[^>]*id="article"[^>]*>(.*?)<\/div>/s);

    if (articleMatch) {
      const articleHTML = articleMatch[1];
      console.log("‚úÖ –ë–ª–æ–∫ article –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º li —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏...");

      const listItems = articleHTML.match(/<li[^>]*>(.*?)<\/li>/gi);

      if (listItems && listItems.length > 0) {
        console.log(
          `üìã –ù–∞–π–¥–µ–Ω–æ ${listItems.length} li —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–ª–æ–∫–µ article`
        );

        for (const item of listItems) {
          const cleanText = item
            .replace(/<[^>]*>/g, "")
            .replace(/&nbsp;/g, " ")
            .replace(/\s+/g, " ")
            .trim();

          if (
            cleanText.length > 10 &&
            (cleanText.includes("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç") ||
              cleanText.includes("–ú–ë") ||
              cleanText.includes("MB") ||
              cleanText.includes("–ú–∏–Ω") ||
              cleanText.includes("–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ")) &&
            /-\s*\d+/.test(cleanText)
          ) {
            extractedContent.push(cleanText);
          }
        }
      }
    }

    if (extractedContent.length === 0) {
      const anyListItems = html.match(/<li[^>]*>(.*?)<\/li>/gi);
      if (anyListItems && anyListItems.length > 0) {
        for (const item of anyListItems) {
          if (item.includes("icon-gel")) {
            const cleanText = item
              .replace(/<[^>]*>/g, "")
              .replace(/&nbsp;/g, " ")
              .replace(/\s+/g, " ")
              .trim();

            if (cleanText.length > 5 && cleanText.length < 200) {
              extractedContent.push(cleanText);
            }
          }
        }
      }
    }

    if (extractedContent.length > 0) {
      const uniqueContent = [...new Set(extractedContent)];
      return uniqueContent.join("\n‚Ä¢ ");
    }

    return "–ù–æ–≤–∞—è –∞–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!";
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error.message);
    return "–ù–æ–≤–∞—è –∞–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!";
  }
}

async function checkForNewPromotions() {
  console.log("üïê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π...");

  const maxChecks = 5;
  let foundNew = false;

  for (let i = 1; i <= maxChecks; i++) {
    const pageNumber = botData.lastFoundNumber + i;
    const result = await checkPageExists(pageNumber);

    if (result.exists) {
      console.log(`üéâ –ù–ê–ô–î–ï–ù–ê –ù–û–í–ê–Ø –ê–ö–¶–ò–Ø: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}`);

      botData.lastFoundNumber = pageNumber;
      await saveData();

      await notifySubscribers(pageNumber, result);
      foundNew = true;
    } else {
      console.log(
        `‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É`
      );
      botData.lastCheckedNumber = pageNumber;
      break;
    }
  }

  if (!foundNew) {
    console.log("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç");
  }

  await saveData();
}

async function notifySubscribers(pageNumber, pageData) {
  const promoText =
    pageData.content !== "–ù–æ–≤–∞—è –∞–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!"
      ? `\nüìã *–î–µ—Ç–∞–ª–∏ –∞–∫—Ü–∏–∏:*\n‚Ä¢ ${pageData.content}`
      : "";

  const message = `üéâ *–ù–û–í–ê–Ø –ê–ö–¶–ò–Ø –û–¢ MAGTICOM!*

üìù *${pageData.title}*${promoText}

üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–∫—Ü–∏–∏](${pageData.url})

‚è∞ –ù–∞–π–¥–µ–Ω–æ: ${new Date().toLocaleString("ru-RU", {
    timeZone: "Asia/Tbilisi",
  })}`;

  const totalRecipients =
    botData.subscribers.length + botData.groupChats.length;
  console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${totalRecipients} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º`);

  for (const chatId of botData.subscribers) {
    try {
      await bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        disable_web_page_preview: false,
      });
      console.log(`‚úÖ –õ–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${chatId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${chatId}:`, error.message);

      if (error.response && error.response.error_code === 403) {
        botData.subscribers = botData.subscribers.filter((id) => id !== chatId);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: ${chatId}`);
      }
    }
  }

  for (const chatId of botData.groupChats) {
    try {
      await bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        disable_web_page_preview: false,
      });
      console.log(`‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${chatId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ ${chatId}:`, error.message);

      if (
        error.response &&
        (error.response.error_code === 403 || error.response.error_code === 400)
      ) {
        botData.groupChats = botData.groupChats.filter((id) => id !== chatId);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: ${chatId}`);
      }
    }
  }

  await saveData();
}

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const chatType = msg.chat.type;
  const username = msg.from.first_name || msg.from.username || "–¥—Ä—É–≥";

  if (chatType === "private") {
    if (!botData.subscribers.includes(chatId)) {
      botData.subscribers.push(chatId);
      await saveData();
      console.log(`‚ûï –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: ${chatId} (${username})`);
    }

    const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${username}!

üéØ –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏—è—Ö Magticom!

üìä *–°—Ç–∞—Ç—É—Å:*
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${botData.isMonitoring ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${botData.subscribers.length}
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤: ${botData.groupChats.length}

‚åö –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å 10:00 –¥–æ 22:00 (–¢–±–∏–ª–∏—Å–∏)

*–ö–æ–º–∞–Ω–¥—ã:*
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫—Ü–∏–∏ —Å–µ–π—á–∞—Å
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º`;

    await bot.sendMessage(chatId, welcomeMessage, { parse_mode: "Markdown" });
  } else if (chatType === "group" || chatType === "supergroup") {
    if (!botData.groupChats.includes(chatId)) {
      botData.groupChats.push(chatId);
      await saveData();
      console.log(`‚ûï –ù–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: ${chatId} (${msg.chat.title})`);
    }

    const groupWelcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!

üéØ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏—è—Ö Magticom –≤ —ç—Ç–æ—Ç —á–∞—Ç!

üìä *–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:*
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${botData.isMonitoring ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å 10:00 –¥–æ 22:00 (–¢–±–∏–ª–∏—Å–∏)

*–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`;

    await bot.sendMessage(chatId, groupWelcomeMessage, {
      parse_mode: "Markdown",
    });
  }
});

bot.onText(/\/check/, async (msg) => {
  const chatId = msg.chat.id;

  await bot.sendMessage(chatId, "üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –∞–∫—Ü–∏–∏...");

  try {
    const oldFoundNumber = botData.lastFoundNumber;
    await checkForNewPromotions();

    if (botData.lastFoundNumber > oldFoundNumber) {
      await bot.sendMessage(
        chatId,
        `üéâ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∞–∫—Ü–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!`
      );
    } else {
      await bot.sendMessage(
        chatId,
        `üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–∫—Ü–∏–π! –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ü–∏—è –æ—Ç Magticom –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –∞–∫—Ç—É–∞–ª—å–Ω–∞.`
      );
    }
  } catch (error) {
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${error.message}`);
  }
});

bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;

  const tbilisiTime = new Date().toLocaleString("ru-RU", {
    timeZone: "Asia/Tbilisi",
    hour12: false,
  });

  const lastPromoUrl = `${BASE_URL}${botData.lastFoundNumber}`;

  const statusMessage = `üìä *–°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê*

‚è∞ –í—Ä–µ–º—è –≤ –¢–±–∏–ª–∏—Å–∏: ${tbilisiTime}
üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${botData.isMonitoring ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
üë• –õ–∏—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${botData.subscribers.length}
üí¨ –ì—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤: ${botData.groupChats.length}

üì± [–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è –∞–∫—Ü–∏—è](${lastPromoUrl})

‚è∞ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å 10:00 –¥–æ 22:00

üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase`;

  await bot.sendMessage(chatId, statusMessage, { parse_mode: "Markdown" });
});

bot.onText(/\/chatid/, async (msg) => {
  const chatId = msg.chat.id;
  const chatType = msg.chat.type;
  const chatTitle = msg.chat.title || "–õ–∏—á–Ω—ã–π —á–∞—Ç";

  const idMessage = `üîç *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ê–¢–ï*

üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatTitle}
üÜî Chat ID: \`${chatId}\`
üì± –¢–∏–ø: ${chatType}`;

  await bot.sendMessage(chatId, idMessage, { parse_mode: "Markdown" });
});

bot.onText(/\/addgroup/, async (msg) => {
  const chatId = msg.chat.id;
  const chatType = msg.chat.type;

  if (chatType === "private") {
    await bot.sendMessage(
      chatId,
      "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!"
    );
    return;
  }

  if (!botData.groupChats.includes(chatId)) {
    botData.groupChats.push(chatId);
    await saveData();
    console.log(`‚ûï –í—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: ${chatId}`);

    await bot.sendMessage(
      chatId,
      `‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!
        
üìä –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–æ:
‚Ä¢ –õ–∏—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${botData.subscribers.length}
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤: ${botData.groupChats.length}`
    );
  } else {
    await bot.sendMessage(
      chatId,
      "‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!"
    );
  }
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const chatType = msg.chat.type;

  const helpMessage = `üìö *–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å  
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/chatid - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
/addgroup - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)

ü§ñ *–ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ë–û–¢:*
‚Ä¢ –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫—Ü–∏–π
‚Ä¢ –ü—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
‚Ä¢ –†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è (10:00-22:00)
‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Supabase

üîó *–ü–†–û–í–ï–†–Ø–ï–ú–´–ï –°–¢–†–ê–ù–ò–¶–´:*
–°–∞–π—Ç: magticom.ge/ru/sakvirveli[–Ω–æ–º–µ—Ä]`;

  await bot.sendMessage(chatId, helpMessage, { parse_mode: "Markdown" });
});

function isWorkingHours() {
  const now = new Date();
  const tbilisiTime = new Date(
    now.toLocaleString("en-US", { timeZone: "Asia/Tbilisi" })
  );
  const hour = tbilisiTime.getHours();

  return hour >= 10 && hour <= 22;
}

function startMonitoring() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ü–∏–π Magticom...");
  botData.isMonitoring = true;

  setInterval(async () => {
    if (isWorkingHours()) {
      try {
        await checkForNewPromotions();
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:", error.message);
      }
    } else {
      console.log("üò¥ –ù–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É");
    }
  }, 30 * 60 * 1000);

  setTimeout(async () => {
    if (isWorkingHours()) {
      console.log("üé¨ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...");
      await checkForNewPromotions();
    }
  }, 30000);
}

bot.on("error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:", error.message);
});

bot.on("polling_error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ polling:", error.message);
});

async function init() {
  console.log("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Magticom Monitor...");

  await initSupabase();
  await loadData();

  try {
    const botInfo = await bot.getMe();
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${botInfo.username}`);
    console.log(`üë• –õ–∏—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${botData.subscribers.length}`);
    console.log(`üí¨ –ì—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤: ${botData.groupChats.length}`);
    console.log(`üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç`);

    startMonitoring();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error.message);
    process.exit(1);
  }
}

init();
