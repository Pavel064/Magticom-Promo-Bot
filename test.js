const axios = require("axios");

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Telegram API
async function testPageCheck() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü...\n");

  const BASE_URL = "https://www.magticom.ge/ru/sakvirveli";

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ä–∞–±–æ—á—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  console.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (262):");
  try {
    const response = await axios.get(`${BASE_URL}262`, {
      timeout: 10000,
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
      },
    });

    console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`   üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const hasPromoContent =
      response.data.includes("–ß—É–¥–æ") ||
      response.data.includes("–∞–∫—Ü–∏") ||
      response.data.includes("–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏");

    console.log(`   üéØ –°–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ü–∏—é: ${hasPromoContent ? "–î–∞" : "–ù–µ—Ç"}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const titleMatch = response.data.match(/<title>(.*?)<\/title>/i);
    if (titleMatch) {
      console.log(`   üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${titleMatch[1].trim()}`);
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (999):");
  try {
    const response = await axios.get(`${BASE_URL}999`, {
      timeout: 5000,
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
      },
    });
    console.log(`   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç: ${response.status}`);
  } catch (error) {
    console.log(
      `   ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${
        error.response ? error.response.status : error.message
      }`
    );
  }

  console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:");
  const now = new Date();
  const tbilisiTime = new Date(
    now.toLocaleString("en-US", { timeZone: "Asia/Tbilisi" })
  );
  const hour = tbilisiTime.getHours();
  const isWorking = hour >= 10 && hour <= 22;

  console.log(
    `   üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¢–±–∏–ª–∏—Å–∏: ${tbilisiTime.toLocaleString("ru-RU")}`
  );
  console.log(`   ‚è∞ –ß–∞—Å: ${hour}`);
  console.log(`   üü¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: ${isWorking ? "–î–∞" : "–ù–µ—Ç"}`);
}

// –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function testDataExtraction() {
  console.log("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...\n");

  const testHTML = `
    <html>
        <head><title>–ß—É–¥–æ-–î–Ω–∏ - Magticom</title></head>
        <body>
            <h1>–ù–æ–≤–∞—è –∞–∫—Ü–∏—è!</h1>
            <p>–í –ú–∞–≥—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è #–ß—É–¥–æ-–î–Ω–∏!</p>
            <p>20-–≥–æ –∏ 21- –≥–æ –∏—é–ª—è: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç -25</p>
        </body>
    </html>`;

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const titleMatch = testHTML.match(/<title>(.*?)<\/title>/i);
  console.log(
    `üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${titleMatch ? titleMatch[1].trim() : "–ù–µ –Ω–∞–π–¥–µ–Ω"}`
  );

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const contentMatch = testHTML.match(/<p[^>]*>(.*?)<\/p>/gi);
  if (contentMatch) {
    const content = contentMatch
      .map((p) => p.replace(/<[^>]*>/g, ""))
      .join(" ");
    console.log(`üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç: ${content.substring(0, 100)}...`);
  }

  console.log("‚úÖ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Magticom Bot\n");

  try {
    await testPageCheck();
    testDataExtraction();

    console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    console.log("\nüí° –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞:");
    console.log("   npm start");
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:", error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests();
}

module.exports = { testPageCheck, testDataExtraction };
